{"version":3,"file":"component.customers-addresses.js?v=1733162424563","mappings":"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","sources":["webpack:///../../../../../src/components/async/customers-addresses/customers-addresses.vue","webpack:///../../../../../src/components/async/customers-addresses/customers-addresses.vue?9f27"],"sourcesContent":["<template>\n  <div />\n</template>\n\n<script>\n\n/**\n * Vue: Customers addresses (customers-addresses)\n * -----------------------------------------------------------------------------\n * Address page section.\n * - Can't use Vue because we can't easily pass all the {% form %} data to Vue.\n * - Instead we use the Vue component to load vanilla JS code.\n */\nimport { mapActions } from 'vuex'\n\nimport { focusable } from '~/helpers/accessibility'\n\nexport default {\n  name: 'CustomersAddresses',\n\n  data() {\n    return {\n      formId: '',\n      nodeSelectors: false,\n    }\n  },\n\n  watch: {\n\n    /**\n     * Watch form ID to update visible elements.\n     */\n    formId() {\n      if (!this.nodeSelectors) {\n        return\n      }\n\n      /**\n       * Toggle element visibility.\n       */\n      this.nodeSelectors.container.addresses.classList.toggle(this.$class('hidden'))\n      this.nodeSelectors.container.form.classList.toggle(this.$class('hidden'))\n\n      this.nodeSelectors.forms.forEach((element) => {\n        element.classList.add(this.$class('hidden'))\n      })\n\n      const form = this.getForm(this.formId)\n\n      if (!form) {\n        return\n      }\n\n      form.classList.remove(this.$class('hidden'))\n      this.setFocus()\n    },\n  },\n\n  mounted() {\n    this.setNodeSelectors()\n\n    if (!this.nodeSelectors.container.addresses) {\n      return\n    }\n\n    this.setEventListeners()\n    this.updateCheckboxesClass()\n    this.updateSelectValue('country')\n\n    /**\n     * Ensure all country values have been set before updating province.\n     */\n    setTimeout(() => {\n      this.updateSelectValue('province')\n    }, 0)\n\n    this.checkErrors()\n  },\n\n  methods: {\n\n    /**\n     * Map Vuex actions.\n     */\n    ...mapActions({\n      closeOverlay: 'overlays/close',\n      openOverlay: 'overlays/open',\n    }),\n\n    /**\n     * Set node selectors.\n     */\n    setNodeSelectors() {\n      this.nodeSelectors = {\n        actions: {\n          add: document.querySelector('[js-addresses=\"add\"]'),\n          back: [...document.querySelectorAll('[js-addresses=\"back\"]')],\n          delete: [...document.querySelectorAll('[js-addresses=\"delete\"]')],\n          deleteCancel: document.querySelector('[js-addresses=\"deleteCancel\"]'),\n          deleteConfirm: document.querySelector('[js-addresses=\"deleteConfirm\"]'),\n          edit: [...document.querySelectorAll('[js-addresses=\"edit\"]')],\n          quickDefault: [...document.querySelectorAll('[js-addresses=\"quickDefault\"]')],\n        },\n        container: {\n          addresses: document.querySelector('[js-addresses=\"addressesContainer\"]'),\n          form: document.querySelector('[js-addresses=\"formContainer\"]'),\n        },\n        error: document.querySelector('[js-addresses=\"error\"]'),\n        forms: [...document.querySelectorAll('[js-addresses=\"forms\"]')],\n        input: {\n          checkbox: [...document.querySelectorAll('[js-addresses=\"checkbox\"]')],\n          country: [...document.querySelectorAll('[js-addresses=\"country\"]')],\n          province: [...document.querySelectorAll('[js-addresses=\"province\"]')],\n        },\n      }\n    },\n\n    /**\n     * Set event listeners.\n     */\n    setEventListeners() {\n\n      /**\n       * Form ID updates.\n       */\n      this.nodeSelectors.actions.add.addEventListener('click', () => {\n        this.formId = 'new'\n      })\n\n      this.nodeSelectors.actions.edit.forEach((element) => {\n        element.addEventListener('click', () => {\n          this.formId = element.dataset.formId\n        })\n      })\n\n      this.nodeSelectors.actions.back.forEach((element) => {\n        element.addEventListener('click', () => {\n          this.formId = ''\n          sessionStorage.removeItem('addressSubmit')\n        })\n      })\n\n      /**\n       * Form events.\n       */\n      this.nodeSelectors.actions.quickDefault.forEach((element) => {\n        element.addEventListener('change', () => {\n          this.handleQuickDefaultChange(element.dataset.formId)\n        })\n      })\n\n      this.nodeSelectors.input.country.forEach((element) => {\n        element.addEventListener('change', () => {\n          this.handleCountryChange(element)\n        })\n      })\n\n      /**\n       * Save sessionStorage on submit, if submit errors then this is used to\n       * show the errors only on first page load.\n       */\n      this.nodeSelectors.forms.forEach((element) => {\n        element.addEventListener('submit', () => {\n          sessionStorage.setItem('addressSubmit', true)\n        })\n      })\n\n      /**\n       * Delete.\n       */\n      this.nodeSelectors.actions.delete.forEach((element) => {\n        element.addEventListener('click', () => {\n          this.handleDeleteClick(element.dataset.formId)\n        })\n      })\n\n      this.nodeSelectors.actions.deleteCancel.addEventListener('click', () => {\n        this.handleDeleteCancel()\n      })\n\n      this.nodeSelectors.actions.deleteConfirm.addEventListener('click', () => {\n        this.handleDeleteConfirm()\n      })\n    },\n\n    /**\n     * Set focus on first focusable element when switching display.\n     */\n    setFocus() {\n      const selector = this.formId ? 'form' : 'addresses'\n      const focusableElements = focusable(this.nodeSelectors.container[selector])\n\n      if (!focusableElements.length) {\n        return\n      }\n\n      focusableElements[0].focus()\n    },\n\n    /**\n     * Update 'set as default' checkboxes with custom class for styles.\n     */\n    updateCheckboxesClass() {\n      this.nodeSelectors.input.checkbox.forEach((element) => {\n        element.classList.add('checkbox__input')\n      })\n    },\n\n    /**\n     * Update country/province selects with default value.\n     * @param {String} type - Either `country` or `province`.\n     */\n    updateSelectValue(type) {\n      this.nodeSelectors.input[type].forEach((element) => {\n        if (!element.dataset.default) {\n          return\n        }\n\n        const optionIndex = [...element.options].findIndex((option) => {\n          return (\n            option.innerText.trim() === element.dataset.default ||\n            option.value === element.dataset.default\n          )\n        })\n\n        if (optionIndex < 0) {\n          return\n        }\n\n        element.options[optionIndex].selected = true\n        element.dispatchEvent(new Event('change'))\n      })\n    },\n\n    /**\n     * Get associated form element.\n     * @param {String} formId - Form ID to find.\n     * @returns {HTMLElement}\n     */\n    getForm(formId) {\n      return this.nodeSelectors.forms.find((form) => {\n        return form.dataset.formId == formId\n      })\n    },\n\n    /**\n     * Check if errors exist, if they do switch to that form.\n     */\n    checkErrors() {\n      if (!this.nodeSelectors.error) {\n        sessionStorage.removeItem('addressSubmit')\n        return\n      }\n\n      /**\n       * Only switch to form errors if last action was to submit a form.\n       */\n      if (!sessionStorage.getItem('addressSubmit')) {\n        return\n      }\n\n      this.formId = this.nodeSelectors.error.dataset.formId\n    },\n\n    /**\n     * Handle quick default change.\n     * - Finds related form and updates checkbox and submits.\n     * @param {String} formId - Form ID to update.\n     */\n    handleQuickDefaultChange(formId) {\n      const form = this.getForm(formId)\n      const checkbox = form.querySelector('[js-addresses=\"checkbox\"]')\n      checkbox.checked = true\n\n      form.submit()\n    },\n\n    /**\n     * Handle country select change.\n     * - Update province select with country's options.\n     * @param {HTMLElement} select - Change event select.\n     */\n    handleCountryChange(select) {\n      const form = this.getForm(select.dataset.formId)\n\n      if (!form) {\n        return\n      }\n\n      const option = select[select.selectedIndex]\n      const provinces = JSON.parse(option.dataset.provinces)\n      const provincesContainer = form.querySelector('[js-addresses=\"provinceContainer\"]')\n      const provincesSelect = form.querySelector('[js-addresses=\"province\"]')\n\n      provincesSelect.value = ''\n      provincesSelect.innerHTML = ''\n\n      if (!provinces.length) {\n        provincesContainer.classList.add(this.$class('hidden'))\n        return\n      }\n\n      const options = provinces.map((province) => {\n        return `<option value=\"${province[0]}\">${province[1]}</option>`\n      }).join('')\n\n      provincesSelect.innerHTML = options\n      provincesContainer.classList.remove(this.$class('hidden'))\n    },\n\n    /**\n     * Handle delete action click.\n     * @param {String} formId - Form ID to delete.\n     */\n    handleDeleteClick(formId) {\n      this.nodeSelectors.actions.deleteConfirm.dataset.formId = formId\n\n      this.openOverlay({\n        ignoreDismissed: true,\n        namespace: 'deleteAddress',\n      })\n    },\n\n    /**\n     * Handle delete confirm.\n     */\n    handleDeleteCancel() {\n      this.nodeSelectors.actions.deleteConfirm.dataset.formId = ''\n      this.closeOverlay('deleteAddress')\n    },\n\n    /**\n     * Handle delete confirm.\n     */\n    handleDeleteConfirm() {\n      const formId = this.nodeSelectors.actions.deleteConfirm.dataset.formId\n\n      Shopify.postLink(`/account/addresses/${formId}`, {\n        parameters: { _method: 'delete' },\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\">\n@import './customers-addresses';\n</style>\n","import { render } from \"./customers-addresses.vue?vue&type=template&id=3899aa94\"\nimport script from \"./customers-addresses.vue?vue&type=script&lang=js\"\nexport * from \"./customers-addresses.vue?vue&type=script&lang=js\"\n\nimport \"./customers-addresses.vue?vue&type=style&index=0&id=3899aa94&lang=scss\"\n\nimport exportComponent from \"/buddy/hyperx-canvas-1/node_modules/@we-make-websites/basis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["name","data","formId","nodeSelectors","watch","this","container","addresses","classList","toggle","$class","form","forms","forEach","element","add","getForm","remove","setFocus","mounted","setNodeSelectors","setEventListeners","updateCheckboxesClass","updateSelectValue","setTimeout","checkErrors","methods","mapActions","closeOverlay","openOverlay","actions","document","querySelector","back","querySelectorAll","delete","deleteCancel","deleteConfirm","edit","quickDefault","error","input","checkbox","country","province","addEventListener","dataset","sessionStorage","removeItem","handleQuickDefaultChange","handleCountryChange","setItem","handleDeleteClick","handleDeleteCancel","handleDeleteConfirm","selector","focusableElements","focusable","length","focus","type","default","optionIndex","options","findIndex","option","innerText","trim","value","selected","dispatchEvent","Event","find","getItem","checked","submit","select","selectedIndex","provinces","JSON","parse","provincesContainer","provincesSelect","innerHTML","map","join","ignoreDismissed","namespace","Shopify","postLink","parameters","_method","_createElementBlock"],"sourceRoot":""}